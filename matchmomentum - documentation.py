# -*- coding: utf-8 -*-
"""matchmomentum.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fQqJ_czC7g_llUri3mZguKTj3hIrYHlb
"""

import matplotlib.pyplot as plt
from matplotlib.cm import ScalarMappable
from matplotlib.lines import Line2D
import matplotlib.patches as mpatches
from matplotlib.patches import Patch
import matplotlib.font_manager as fm
import matplotlib.ticker as ticker
from matplotlib import rcParams
import matplotlib.patheffects as path_effects
from matplotlib.colors import ListedColormap, LinearSegmentedColormap
from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)

import os
import pandas as pd
import glob
from datetime import date
import numpy as np
from sklearn import preprocessing

!pip install mplsoccer
from mplsoccer import Pitch, VerticalPitch, PyPizza, Radar, grid
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import matplotlib.patheffects as path_effects
from matplotlib.colors import ListedColormap, LinearSegmentedColormap
import matplotlib.font_manager as fm
from matplotlib.legend_handler import HandlerLine2D
from matplotlib.patches import FancyArrowPatch
from matplotlib.patches import FancyBboxPatch
import matplotlib.patches as patches
from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)

from PIL import Image
from tempfile import NamedTemporaryFile
import urllib
import os


from textwrap import wrap
from tempfile import NamedTemporaryFile
import urllib

github_url = 'https://github.com/google/fonts/blob/main/ofl/poppins/Poppins-Bold.ttf'
url = github_url + '?raw=true'

response = urllib.request.urlopen(url)
f = NamedTemporaryFile(delete=False, suffix='.ttf')
f.write(response.read())
f.close()

bold = fm.FontProperties(fname=f.name)

github_url = 'https://github.com/google/fonts/blob/main/ofl/poppins/Poppins-Regular.ttf'
url = github_url + '?raw=true'

response = urllib.request.urlopen(url)
f = NamedTemporaryFile(delete=False, suffix='.ttf')
f.write(response.read())
f.close()

reg = fm.FontProperties(fname=f.name)

github_url = 'https://github.com/google/fonts/blob/main/ofl/poppins/Poppins-Italic.ttf'
url = github_url + '?raw=true'

response = urllib.request.urlopen(url)
f = NamedTemporaryFile(delete=False, suffix='.ttf')
f.write(response.read())
f.close()

ita = fm.FontProperties(fname=f.name)

path_eff = [path_effects.Stroke(linewidth=2, foreground='#ffffff'),
            path_effects.Normal()]

#mount to gdrive
from google.colab import drive
drive.mount('/content/gdrive', force_remount=True)

!pip install highlight-text
from highlight_text import HighlightText, ax_text, fig_text

def genmomentum(data1, data2):
  '''
  Generating momentum based on passing and attacking thread

  Parameters:
    data1 (pd.DataFrame): First-half event data.
    data2 (pd.DataFrame): Second-half event data.

    Returns:
    A matplotlib figure containing momentum plots for both halves
  '''
  # duplicate to prevent direct modifying
  df1 = data1.copy()
  df2 = data2.copy()

  # label first and second half
  df1['Babak'] = 'Satu'
  df2['Babak'] = 'Dua'
  df = pd.concat([df1, df2], ignore_index=True)

  # extract match and team info
  temp = df1.copy()
  temp['Home'] = temp['Match'].str.split(' vs ').str[0]
  temp['Away'] = temp['Match'].str.split(' vs ').str[1]
  home = temp['Home'].unique().tolist()[0]
  away = temp['Away'].unique().tolist()[0]
  mtch = temp['Match'].unique().tolist()[0]

  # extract passing and zones (active-passive zone)
  '''
  df_match = df.copy()
  df_match = df_match[['Team','Action','Min','Babak','X1','Y1','X2','Y2']]
  df_match = df_match[(df_match['Action']=='passing')]
  '''
  df_match = df.copy()
  df_match = df_match[['Team','Action','Min','Babak','Act Zone','Pas Zone']]
  df_match = df_match[(df_match['Action']=='passing')]

  #Cleaning Data
  shots = df_match.copy()
  shots['Mins'] = shots['Min'].str.split(' : ').str[0]
  shots['Mins'].fillna(shots['Min'], inplace=True)
  shots['Mins'] = shots['Mins'].astype(float)

  # filter notable action (goal, cards, subs)
  aksi = df[(df['Action']=='own goal') | (df['Action']=='goal') | (df['Action']=='penalty goal') |
            (df['Action']=='penalty missed') | (df['Action']=='yellow card') | (df['Action']=='red card') |
            (df['Action']=='subs')].reset_index(drop=True)
  # handle two yellow card
  for i in range(len(aksi)):
    if (aksi['Sub 1'][i]=='Two Yellow Card') and (aksi['Action'][i]=='red card'):
      aksi['Action'][i] = '2yellow'
  # clean minutes data
  aksi = aksi[['Team','Action','Min','Babak']]
  aksi['Mins'] = aksi['Min'].str.split(' : ').str[0]
  aksi['Mins'].fillna(aksi['Min'], inplace=True)
  aksi['Mins'] = aksi['Mins'].astype(float)
  aksi = aksi.drop(['Min'], axis=1)

  # drop row with missing zone data
  dfy = shots.copy()
  dfy = dfy[dfy['Act Zone'].notna()].reset_index(drop=True)
  dfy = dfy[dfy['Pas Zone'].notna()].reset_index(drop=True)
  dx = dfy[['Action', 'Team', 'Act Zone', 'Pas Zone','Mins','Babak']]
  temp = dx['Act Zone'].apply(lambda x: pd.Series(list(x)))
  # replace zone data with coordinate
  dx['X1'] = temp[0]
  dx['Y1'] = temp[1]
  dx['Y1'] = dx['Y1'].replace({'A':10,'B':30,'C':50,'D':70,'E':90})
  dx['X1'] = dx['X1'].replace({'1':8.34,'2':25.34,'3':42.34,
                               '4':59.34,'5':76.34,'6':93.34})

  temp = dx['Pas Zone'].apply(lambda x: pd.Series(list(x)))
  dx['X2'] = temp[0]
  dx['Y2'] = temp[1]
  dx['Y2'] = dx['Y2'].replace({'A':10,'B':30,'C':50,'D':70,'E':90})
  dx['X2'] = dx['X2'].replace({'1':8.34,'2':25.34,'3':42.34,
                               '4':59.34,'5':76.34,'6':93.34})

  dx = dx[['Team','Action','X1','Y1','X2','Y2','Mins','Babak']]

  # calculate xT(expected thread) data
  xT = pd.read_csv('/content/gdrive/MyDrive/Data/Liga Indonesia 2024/Database/xT_Grid.csv', header=None)
  xT = np.array(xT)
  xT_rows, xT_cols = xT.shape

  shots = dx.copy()
  shots['x1_bin'] = pd.cut(shots['X1'].to_numpy(), bins=xT_cols, labels=False)
  shots['y1_bin'] = pd.cut(shots['Y1'].to_numpy(), bins=xT_rows, labels=False)
  shots['x2_bin'] = pd.cut(shots['X2'].to_numpy(), bins=xT_cols, labels=False)
  shots['y2_bin'] = pd.cut(shots['Y2'].to_numpy(), bins=xT_rows, labels=False)

  shots['start_zone_value'] = shots[['x1_bin', 'y1_bin']].apply(lambda x: xT[int(x[1])][int(x[0])] if not pd.isnull(x[0]) and not pd.isnull(x[1]) else None, axis=1)
  shots['end_zone_value'] = shots[['x2_bin', 'y2_bin']].apply(lambda x: xT[int(x[1])][int(x[0])] if not pd.isnull(x[0]) and not pd.isnull(x[1]) else None, axis=1)
  shots['xT'] = shots['end_zone_value'] - shots['start_zone_value']
  shots = shots[['Team','xT','Mins','Babak']]
  shots = shots.groupby(['Team','Babak','Mins']).sum().reset_index()

  #######
  '''
  Calculating and weighting expected thread (xT)

  Parameters:
    ht = shots dataframe from first half
    ft = shots dataframe from second half

    Returns:
    weighted xT momentum dataframe
  '''
  # split xT into first and second half
  ht = shots[shots['Babak']=='Satu'].reset_index(drop=True)
  ft = shots[shots['Babak']=='Dua'].reset_index(drop=True)

  # create each round dataframes and their labels
  data = [ht, ft]
  babak = ['Satu', 'Dua']
  momentum_df = pd.DataFrame()
  
  # loop through each round
  for fh, i in zip(data, babak):
    # get the maximum xT value
    max_xT_per_minute = fh.groupby(['Team', 'Mins'])['xT'].max().reset_index()
    minutes = sorted(fh['Mins'].unique())

    HOME_TEAM = home
    AWAY_TEAM = away
    # weighted xT values
    weighted_xT_sum = {HOME_TEAM: [], AWAY_TEAM: []}
    momentum = []

    # parameters for the function
    window_size = 4
    decay_rate = 0.25

    # calculate momentum for each minute
    for current_minute in minutes:
      for team in weighted_xT_sum.keys():
        # get recent xT values
        recent_xT_values = max_xT_per_minute[(max_xT_per_minute['Team'] == team) &
                                             (max_xT_per_minute['Mins'] <= current_minute) &
                                             (max_xT_per_minute['Mins'] > current_minute - window_size)]

        # apply exponential decay weights
        weights = np.exp(-decay_rate * (current_minute - recent_xT_values['Mins'].values))
        # compute weighted sum of xT values
        weighted_sum = np.sum(weights * recent_xT_values['xT'].values)
        #store the result
        weighted_xT_sum[team].append(weighted_sum)

      momentum.append(weighted_xT_sum[HOME_TEAM][-1] - weighted_xT_sum[AWAY_TEAM][-1])

    # create dataframe with momentum values for each round
    fh = pd.DataFrame({'minute': minutes,'momentum': momentum})
    fh['Babak'] = i
    # append to the full momentum dataframe
    momentum_df = pd.concat([momentum_df, fh], ignore_index=True)

  ####
  # create momentum figure
  from scipy.ndimage import gaussian_filter1d
  fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(20, 10), dpi=500)
  fig.subplots_adjust(wspace=0.05)
  fig.patch.set_facecolor('#FFFFFF')
  axs = axs.flatten()

  # plot minute pole (every 15 minutes)
  m = [0, 15, 30, 45, 60, 75, 90]

  # plot each round
  for i in range(0,2):
    axs[i].set_ylim(-0.3, 0.3)
    axs[i].set_facecolor('#FFFFFF')
    if i == 0:
      auxdata = momentum_df[momentum_df['Babak']=='Satu'].reset_index(drop=True)
      test = aksi[aksi['Babak']=='Satu'].reset_index(drop=True)
      temp = test[test['Mins'].duplicated()==False].reset_index(drop=True)
      d1 = test[test['Mins'].duplicated()==True].reset_index(drop=True)
      d2 = d1[d1['Mins'].duplicated()==True].reset_index(drop=True)
      d3 = d2[d2['Mins'].duplicated()==True].reset_index(drop=True)
      d4 = d3[d3['Mins'].duplicated()==True].reset_index(drop=True)
      rlim = auxdata['minute'].max()
      axs[i].set_xticks(m[:4])
      axs[i].set_xlim(0, rlim)

      DC_to_FC = axs[0].transData.transform
      FC_to_NFC = fig.transFigure.inverted().transform
      DC_to_NFC = lambda x: FC_to_NFC(DC_to_FC(x))

      kons = 7.9
    else:
      auxdata = momentum_df[momentum_df['Babak']=='Dua'].reset_index(drop=True)
      test = aksi[aksi['Babak']=='Dua'].reset_index(drop=True)
      temp = test[test['Mins'].duplicated()==False].reset_index(drop=True)
      d1 = test[test['Mins'].duplicated()==True].reset_index(drop=True)
      d2 = d1[d1['Mins'].duplicated()==True].reset_index(drop=True)
      d3 = d2[d2['Mins'].duplicated()==True].reset_index(drop=True)
      d4 = d3[d3['Mins'].duplicated()==True].reset_index(drop=True)
      rlim = auxdata['minute'].max()
      axs[i].set_xticks(m[-4:])
      axs[i].set_xlim(45, rlim)

      DC_to_FC = axs[1].transData.transform
      FC_to_NFC = fig.transFigure.inverted().transform
      DC_to_NFC = lambda x: FC_to_NFC(DC_to_FC(x))

      kons = 8.1

    # create momentum curve
    auxdata['momentum_smooth'] = gaussian_filter1d(auxdata['momentum'], sigma=1)
    for j in range(len(auxdata)):
      if auxdata['momentum_smooth'][j] > 0:
        axs[i].plot(auxdata['minute'][j], auxdata['momentum_smooth'][j], color='#15AF15')
      else:
        axs[i].plot(auxdata['minute'][j], auxdata['momentum_smooth'][j], color='#AF15AF')

    # fill under momentum curve
    axs[i].fill_between(auxdata['minute'], auxdata['momentum_smooth'], where=(auxdata['momentum_smooth'] > 0),
                        color='#15AF15', alpha=0.5, interpolate=True)
    axs[i].fill_between(auxdata['minute'], auxdata['momentum_smooth'], where=(auxdata['momentum_smooth'] < 0),
                        color='#AF15AF', alpha=0.5, interpolate=True)
    axs[i].axhline(0, color='#000000', linewidth=.5)

    # load and plot for important events (goals, cards, subs)
    dupe = [temp, d1, d2, d3, d4]
    nilai_yh = [0.23-0.035*i for i in range(5)]
    nilai_ya = [-0.32+0.035*i for i in range(5)]
    for x, zh, za in zip(dupe, nilai_yh, nilai_ya):
      for j in range(len(x)):
        if x['Team'][j] == home:
          ymax = 0.945
          y1 = zh
          suf = '-H.png'
        else:
          ymax = 0.055
          y1 = za
          suf = '-A.png'

        if x['Action'][j] == 'goal':
          icon = '/content/gdrive/MyDrive/Data/Liga Indonesia 2024/Database/Icon/Goal'+suf
          axs[i].axvline(x['Mins'][j], color='#000000', lw=1, ymin=0.5, ymax=ymax, zorder=3, ls='--')
        elif x['Action'][j] == 'yellow card':
          icon = '/content/gdrive/MyDrive/Data/Liga Indonesia 2024/Database/Icon/YC'+suf
        elif x['Action'][j] == 'red card':
          icon = '/content/gdrive/MyDrive/Data/Liga Indonesia 2024/Database/Icon/RC'+suf
        elif x['Action'][j] == '2yellow':
          icon = '/content/gdrive/MyDrive/Data/Liga Indonesia 2024/Database/Icon/2Y'+suf
        elif x['Action'][j] == 'subs':
          icon = '/content/gdrive/MyDrive/Data/Liga Indonesia 2024/Database/Icon/Subs'+suf
        elif x['Action'][j] == 'own goal':
          icon = '/content/gdrive/MyDrive/Data/Liga Indonesia 2024/Database/Icon/OG'+suf
        elif x['Action'][j] == 'penalty goal':
          icon = '/content/gdrive/MyDrive/Data/Liga Indonesia 2024/Database/Icon/P'+suf
        else:
          icon = '/content/gdrive/MyDrive/Data/Liga Indonesia 2024/Database/Icon/PM'+suf
        ax_coords = DC_to_NFC([x['Mins'][j]-kons, y1])
        logo_ax = fig.add_axes([ax_coords[0], ax_coords[1], 0.125, 0.125], anchor = "C")
        club_icon = Image.open(icon)
        logo_ax.imshow(club_icon)
        logo_ax.axis('off')

    for k in m:
      axs[i].axvline(k, color='#000000', lw=2, ymin=-0.3, ymax=3, zorder=-2, ls='--', alpha=0.075)

    axs[i].spines['top'].set_visible(False)
    axs[i].spines['right'].set_visible(False)
    axs[i].spines['bottom'].set_visible(False)
    axs[i].spines['left'].set_visible(False)
    axs[i].set_yticks([])
    axs[i].xaxis.set_ticks_position('none')
    axs[i].tick_params(axis='x', colors='#000000')

    for tick in axs[i].get_xticklabels():
      tick.set_fontproperties(reg)
    axs[i].xaxis.set_tick_params(labelsize=15)

  # set title in each round
  axs[0].set_title('FIRST HALF', fontproperties=bold, size=20, alpha=0.35)
  axs[1].set_title('SECOND HALF', fontproperties=bold, size=20, alpha=0.35)
  #fig.suptitle('MATCH MOMENTUM', fontproperties=bold, size=30)

  # set name for x-label (minute) and y-label (attacking threat)
  fig.text(0.5, 0.025, 'Minute', ha='center', fontsize=18, fontproperties=bold)
  fig.text(0.1, 0.5, 'Attacking Threat', va='center', ha='center', fontsize=18, fontproperties=bold, rotation=90)

  # set title for match momentum
  fig_text(0.1, 1, '<'+home+'> vs <'+away+'>', fontproperties=bold, size=32,
           highlight_textprops=[{'color':'#15AF15'}, {'color':'#AF15AF'}], color='#000000')
  fig.text(0.1, 0.93, 'Match Momentum | Liga 1 2024/25', fontsize=22, fontproperties=reg)
  fig.savefig('Match Momentum - '+mtch+'.jpg', dpi=500, bbox_inches='tight', facecolor=fig.get_facecolor(), edgecolor='none')

  return fig

df1 = pd.read_excel('tl1.xlsx', skiprows=[0])
df2 = pd.read_excel('tl2.xlsx', skiprows=[0])

genmomentum(df1, df2)